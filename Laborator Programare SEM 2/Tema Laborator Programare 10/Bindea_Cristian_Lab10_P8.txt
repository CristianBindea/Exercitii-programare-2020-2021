/*
   Bindea Gheorghe Cristian  Grupa 2115
   Problema 8 - Program care implementeaza o clasa Fractie cu metode pentru adunare, scadere, inmultire si impartire 
   si o clasa Fractie_ext cu metode pentru incrementarea si decrementarea fractiilor
*/

#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <cmath>

using namespace std;
class Fractie {
   int a;//numarator
   int b;//numitor
   int cmmdc() {
      int a1 = a;
      int b1 = b;
      bool negative = false;
      if (a1 < 0 && b1 < 0) {
         a1 = -a1;
         b1 = -b1;
      }
      else if (a1 < 0) {
         negative = true;
         a1 = -a1;
      }
      else if (b1 < 0) {
         negative = true;
         b1 = -b1;
      }
      while (a1 != b1)
         a1 > b1 ? a1 -= b1 : b1 -= a1;
      if (negative)
         return -a1;
      else
         return a1;
   }
public:
   Fractie() { a = 0; b = 1; }
   Fractie(int x, int y) {
      a = x; b = y;
   }
   Fractie(const Fractie& f) {
      a = f.a; b = f.b;
   }
   void setNumarator(int numarator) { a = numarator; }
   void setNumitor(int numitor) { b = numitor; }
   int getNumarator(void) { return a; }
   int getNumitor(void) { return b; }
   Fractie simplificare(void) {
      int d = cmmdc();
      Fractie rez(a / d, b / d);
      return rez;
   }
   Fractie operator+(Fractie f) {
      int x, y;
      if (b == f.getNumitor()) {
         x = a + f.getNumitor();
         y = b;
         Fractie rez(x, y);
         rez = rez.simplificare();
         return rez;
      }
      else {
         x = a * f.getNumitor() + b * f.getNumarator();
         y = b * f.getNumitor();
         Fractie rez(x, y);
         rez = rez.simplificare();
         return rez;
      }
   }
   Fractie operator-(Fractie f) {
      int x, y;
      if (b == f.getNumitor()) {
         x = a - f.getNumitor();
         y = b;
         Fractie rez(x, y);
         rez = rez.simplificare();
         return rez;
      }
      else {
         x = a * f.getNumitor() - b * f.getNumarator();
         y = b * f.getNumitor();
         Fractie rez(x, y);
         rez = rez.simplificare();
         return rez;
      }
   }
   Fractie operator*(Fractie f) {
      int x, y;
      x = a * f.getNumarator();
      y = b * f.getNumitor();
      Fractie rez(x, y);
      rez = rez.simplificare();
      return rez;
   }
   Fractie operator/(Fractie f) {
      int x, y;
      x = a * f.getNumitor();
      y = b * f.getNumarator();
      Fractie rez(x, y);
      rez = rez.simplificare();
      return rez;
   }
};

class Fractie_ext : public Fractie {
public:
   Fractie_ext() : Fractie() {
   }
   Fractie_ext(int x, int y) : Fractie(x, y) {
   }
   Fractie_ext operator ++ (int) {
      Fractie_ext f(this->getNumarator() + 1, this->getNumitor());
      return f;
   }
   Fractie_ext operator -- (int) {
      Fractie_ext f(this->getNumarator() - 1, this->getNumitor());
      return f;
   }
   Fractie_ext operator -- () {
      Fractie_ext f(this->getNumarator() - 1, this->getNumitor());
      return f;
   }
   Fractie_ext operator ++ () {
      Fractie_ext f(this->getNumarator() + 1, this->getNumitor());
      return f;
   }
};

void afisare(Fractie f);
int main()
{
   int num1,num2;
   Fractie f1;
   Fractie f2;
   cout << "Valori initiale fractie 1: "; afisare(f1);
   cout << "Valori initiale fractie 2: "; afisare(f2);

   cout << "Introduceti doua seturi de numarator/numitor pentru cele doua fractii\n";
   cout << "Numarator fractie 1: "; cin >> num1; f1.setNumarator(num1);
   cout << "Numitor fractie 1: "; cin >> num1; f1.setNumitor(num1);
   cout << "Numarator fractie 2: "; cin >> num1; f2.setNumarator(num1);
   cout << "Numitor fractie 2: "; cin >> num1; f2.setNumitor(num1);
   cout << "Fractie 1: "; afisare(f1);
   cout << "Fractie 2: "; afisare(f2);
   Fractie f3;
   f3 = f1 + f2;
   cout << "Suma celor doua fractii este: "; afisare(f3);
   Fractie f4;
   f4 = f1 - f2;
   cout << "Diferenta celor doua fractii este: "; afisare(f4);
   Fractie f5;
   f5 = f1 * f2;
   cout << "Produsul celor doua fractii este: "; afisare(f5);
   Fractie f6;
   f6 = f1 / f2;
   cout << "Catul celor doua fractii este: "; afisare(f6);


   cout << "\n\n Introduceti doua seturi de numarator/numitor pentru alte doua fractii\n";
   cout << "Numarator fractie 1: "; cin >> num1;
   cout << "Numitor fractie 1: "; cin >> num2;
   Fractie_ext fractie1(num1, num2);
   cout << "Numarator fractie 2: "; cin >> num1;
   cout << "Numitor fractie 2: "; cin >> num2; 
   Fractie_ext fractie2(num1,num2);
   cout << "Fractie 1: "; afisare(fractie1);
   cout << "Fractie 2: "; afisare(fractie2);
   Fractie_ext fractie3;
   fractie3 = fractie1++;
   cout << "Fractia 1 incrementata este: "; afisare(fractie3);
   fractie3 = fractie2--;
   cout << "Fractia 2 decrementata este: "; afisare(fractie3);
   return 0;
}

void afisare(Fractie f)
{
   int x = f.getNumarator();
   int y = f.getNumitor();
   bool negative = false;
   if (x < 0 && y < 0) {
      x = -x;
      y = -y;
   }
   else if (x < 0) {
      x = -x;
      negative = true;
   }
   else if (y < 0) {
      y = -y;
      negative = true;
   }

   if (negative)
      cout << "-";

   if (x == 0)
      cout << 0 << endl;
   else if (y == 1)
      cout << x << endl;
   else
      cout << x << "/" << y << endl;
}