/*
   Bindea Gheorghe Cristian  Grupa 2115
   Problema 9 - Program care continua problema referitoare la gestiunea CNP-ului dintr-un laborator anterior in care valideaza CNP-ul si contorizeaza numarul de instantieri corecte
*/

#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
using namespace std;
#include <time.h>

class Person {
	char nume[16];
	char prenume[24];
	char cnp[14];
public:
	Person(void) { strcpy(nume, "Necunoscut"); strcpy(prenume, "Necunoscut"); strcpy(cnp, "Necunoscut"); contor++; }
	void setNume(char* n);
	void setPrenume(char* p);
	int setCnp(char* c);
	char* getNume(void) { return nume; }
	char* getPrenume(void) { return prenume; }
	char* getCnp(void) { return cnp; }
	char get_gender(void);
	int get_an_nast(void);
	int get_luna_nast(void);
	int get_zi_nast(void);
	int get_varsta(void);
	static int contor;
};
void Person::setNume(char* n) {
	if (n != 0)
		strncpy(nume, n, 15);
	else
		strcpy(nume, "Necunoscut");
}
void Person::setPrenume(char* p) {
	if (p != 0)
		strncpy(prenume, p, 23);
	else
		strcpy(prenume, "Necunoscut");
}
int Person::setCnp(char* c) {
	char buf[3];
	int n;
	if (c != 0) {
		cnp[13] = '\0';
		if (strlen(c) != 13)
			return 1;
		if (c[0] != '1' && c[0] != '2' && c[0] != '5' && c[0] != '6')
			return 2;
		strncpy(buf, c + 1, 2);
		buf[2] = '\0';
		n = atoi(buf);
		if (n > 99)
			return 3;
		strncpy(buf, c + 3, 2);
		buf[2] = '\0';
		n = atoi(buf);
		if (n == 0 || n > 12)
			return 4;
		strncpy(buf, c + 5, 2);
		buf[2] = '\0';
		n = atoi(buf);
		if (n == 0 || n > 31)
			return 5;
		strcpy(cnp, c);
		return 0;
	}
}
char Person::get_gender(void) {
	if (cnp[0] == '1' || cnp[0] == '5') return 'M';
	if (cnp[0] == '2' || cnp[0] == '6') return 'F';
	return 'X';
}
int Person::get_an_nast(void) {
	char buf[3];
	strncpy(buf, cnp + 1, 2);
	buf[2] = '\0';
	return(1900 + atoi(buf));
}
int Person::get_luna_nast(void) {
	char buf[3];
	strncpy(buf, cnp + 3, 2);
	buf[2] = '\0';
	return(atoi(buf));
}
int Person::get_zi_nast(void) {
	return((cnp[5] - '0') * 10 + (cnp[6] - '0'));
}
int Person::get_varsta(void) {
	struct tm* newTime;
	time_t szClock;
	time(&szClock);
	newTime = localtime(&szClock);
	int an_c = 1900 + newTime->tm_year;
	int an_n = get_an_nast();
	int n = an_c - an_n;
	int lu_c = newTime->tm_mon + 1;
	int lu_n = get_luna_nast();
	if (lu_c < lu_n) n--;
	else {
		if (lu_c == lu_n) {
			int zi_c = newTime->tm_mday;
			int zi_n = get_zi_nast();
			if (zi_c < zi_n)
				n--;
		}
	}
	return n;
}
int Person::contor = 0;

bool citire(Person *p);
void afisare(Person p);

int main() {
	const int nrPersoane = 3;
	int cnt = 0;

	Person p[nrPersoane];
	for (int i = 0; i < nrPersoane; i++)
	{
		cout << "\nIntroduceti informatii despre persoana " << i+1 << endl;
		if (citire(&p[i]))
			cnt++;
	}
	for (int i = 0; i < nrPersoane; i++)
		afisare(p[i]);

	cout << "\nDin " << Person::contor << " instantieri, " << cnt << " au data CNP-ului corecta\n";
	return 0;
}

bool citire(Person *p)
{
	char aux_string[30];
	cout << "\nEnter Name: ";
	cin >> aux_string;
	p->setNume(aux_string);
	cout << "\nEnter SurName: ";
	cin >> aux_string;
	p->setPrenume(aux_string);
	cout << "\nEnter CNP: ";
	cin >> aux_string;//1890403120671
	int rez = p->setCnp(aux_string);
	if (rez != 0)
		return false;
	return true;
}
void afisare(Person p)
{
	cout << "Date despre obiect: " << endl;
	cout << "\tNume: " << p.getNume() << ", Prenume: " << p.getPrenume() <<", CNP: " << p.getCnp() << endl;
	cout << "\tSex: " << p.get_gender() << endl;
	cout << "\tData nasterii: " <<p.get_an_nast() << "/" << p.get_luna_nast() << "/" << p.get_zi_nast() << endl;
	cout << "\tVarsta: " << p.get_varsta() << endl;
}