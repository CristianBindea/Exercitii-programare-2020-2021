/*
   Bindea Gheorghe Cristian  Grupa 2115
   Problema 11 - Program care implementeaza o clasa Fractie cu functii care supraincarca oeperatorii +,-,*,/,++,--,+=,-=,*= si /=
*/

#define _CRT_SECURE_NO_WARNINGS
#include <iostream>

using namespace std;

class Fractie;
void afisare(Fractie f);

class Fractie {
   int a;//numarator
   int b;//numitor
   int cmmdc() {
      int a1 = a;
      int b1 = b;
      bool negative = false;
      if (a1 < 0 && b1 < 0) {
         a1 = -a1;
         b1 = -b1;
      }
      else if (a1 < 0) {
         negative = true;
         a1 = -a1;
      }
      else if (b1 < 0) {
         negative = true;
         b1 = -b1;
      }
      while (a1 != b1)
         a1 > b1 ? a1 -= b1 : b1 -= a1;
      if (negative)
         return -a1;
      else
         return a1;
   }
   static int icount;
public:
   Fractie() { a = 0; b = 1; icount++; }
   Fractie(int x, int y) {
      a = x; b = y;
      icount++;
   }
   Fractie(const Fractie& f) {
      a = f.a; b = f.b;
      icount++;
   }
   void setNumarator(int numarator) { a = numarator; }
   void setNumitor(int numitor) { b = numitor; }
   int getNumarator(void) { return a; }
   int getNumitor(void) { return b; }
   static int getIcount(void) { return icount; }
   Fractie simplificare(void) {
      int d = cmmdc();
      Fractie rez(a / d, b / d);
      return rez;
   }
   friend Fractie operator+(Fractie f1, Fractie f2);
   friend Fractie operator-(Fractie f1, Fractie f2);
   friend Fractie operator*(Fractie f1, Fractie f2);
   friend Fractie operator/(Fractie f1, Fractie f2);

   Fractie operator ++ (int) {
      Fractie f(this->getNumarator() + this->getNumitor(), this->getNumitor());
      return f;
   }
   Fractie operator -- (int) {
      Fractie f(this->getNumarator() - this->getNumitor(), this->getNumitor());
      return f;
   }
   Fractie operator -- () {
      Fractie f(this->getNumarator() - this->getNumitor(), this->getNumitor());
      return f;
   }
   Fractie operator ++ () {
      Fractie f(this->getNumarator() + this->getNumitor(), this->getNumitor());
      return f;
   }
   void operator+=(Fractie& f)
   {
      this->a = this->a * f.b + this->b * f.a;
      this->b = this->b * f.b;
      *this = this->simplificare();
   }
   void operator-=(Fractie& f)
   {
      this->a = this->a * f.b - this->b * f.a;
      this->b = this->b * f.b;
      afisare(*this);
      *this = this->simplificare();
      afisare(*this);
   }
   void operator*=(Fractie& f)
   {
      this->a = this->a * f.a;
      this->b = this->b * f.b;
      *this = this->simplificare();
   }
   void operator/=(Fractie& f)
   {
      this->a = this->a * f.b;
      this->b = this->b * f.a;
      *this = this->simplificare();
   }
   ~Fractie() {
      //  cout << "Destructor, contor: " << icount << endl;
   }
};

int Fractie::icount = 0;
Fractie operator+(Fractie f1, Fractie f2) {
   int x, y;
   if (f1.getNumitor() == f2.getNumitor()) {
      x = f1.getNumarator() + f2.getNumitor();
      y = f1.getNumitor();
      Fractie rez(x, y);
      rez = rez.simplificare();
      return rez;
   }

   x = f1.getNumarator() * f2.getNumitor() + f1.getNumitor() * f2.getNumarator();
   y = f1.getNumitor() * f2.getNumitor();
   Fractie rez(x, y);
   rez = rez.simplificare();
   return rez;
}
Fractie operator-(Fractie f1, Fractie f2) {
   int x, y;
   if (f1.getNumitor() == f2.getNumitor()) {
      x = f1.getNumarator() - f2.getNumitor();
      y = f1.getNumitor();
      Fractie rez(x, y);
      rez = rez.simplificare();
      return rez;
   }

   x = f1.getNumarator() * f2.getNumitor() - f1.getNumitor() * f2.getNumarator();
   y = f1.getNumitor() * f2.getNumitor();
   Fractie rez(x, y);
   rez = rez.simplificare();
   return rez;
}
Fractie operator*(Fractie f1, Fractie f2) {
   int x, y;
   x = f1.getNumarator() * f2.getNumarator();
   y = f1.getNumitor() * f2.getNumitor();
   Fractie rez(x, y);
   rez = rez.simplificare();
   return rez;
}
Fractie operator/(Fractie f1, Fractie f2) {
   int x, y;
   x = f1.getNumitor() * f2.getNumitor();
   y = f1.getNumarator() * f2.getNumarator();
   Fractie rez(x, y);
   rez = rez.simplificare();
   return rez;
}

int main()
{
   int num;
   Fractie f1, f2;
   cout << "\nIntroduceti doua seturi de numarator/numitor pentru cele doua fractii:\n";
   cout << "Numarator fractie 1: "; cin >> num; f1.setNumarator(num);
   cout << "Numitor fractie 1: "; cin >> num;
   if (num != 0)
      f1.setNumitor(num);
   else { cout << "Numitorul nu poate fi 0\n"; cout << "Contorul la sfarsitul programului: " << Fractie::getIcount() << "\n"; return 1; }

   cout << "Numarator fractie 2: "; cin >> num; f2.setNumarator(num);
   cout << "Numitor fractie 2: "; cin >> num;
   if (num != 0)
      f2.setNumitor(num);
   else { cout << "Numitorul nu poate fi 0\n"; cout << "Contorul la sfarsitul programului: " << Fractie::getIcount() << "\n"; return 1; }

   cout << "Fractie 1: "; afisare(f1);
   cout << "Fractie 2: "; afisare(f2);
   Fractie f1_copy = f1;
   Fractie f2_copy = f2;
   Fractie f1_rez, f2_rez, f3_rez, f4_rez;

   f1_copy += f2_copy; f1_rez = f1_copy;
   f1_copy = f1;
   f1_copy -= f2_copy; f2_rez = f1_copy;
   f1_copy = f1;
   f1_copy *= f2_copy; f3_rez = f1_copy;
   f1_copy = f1;
   f1_copy /= f2_copy; f4_rez = f1_copy;
   f1_copy = f1;
   cout << "Suma celor doua fractii este: "; afisare(f1_rez);
   cout << "Diferenta celor doua fractii este: "; afisare(f2_rez);
   cout << "Produsul celor doua fractii este: "; afisare(f3_rez);
   cout << "Catul celor doua fractii este: "; afisare(f4_rez);

   cout << "\n";
   cout << "Incrementare postfixata a sumei: "; f1_rez = f1_rez++; afisare(f1_rez);
   cout << "Decrementarea postfixata a diferentei: "; f2_rez = f2_rez--; afisare(f2_rez);
   cout << "Incrementare prefixata a produsului: "; f3_rez = ++f3_rez; afisare(f3_rez);
   cout << "Decrementarea prefixata a catului: "; f4_rez = --f4_rez; afisare(f4_rez);
   cout << "\n";

   return 0;
}
void afisare(Fractie f)
{
   int x = f.getNumarator();
   int y = f.getNumitor();
   bool negative = false;
   if (x < 0 && y < 0) {
      x = -x;
      y = -y;
   }
   else if (x < 0) {
      x = -x;
      negative = true;
   }
   else if (y < 0) {
      y = -y;
      negative = true;
   }

   if (negative)
      cout << "-";

   if (x == 0)
      cout << 0 << endl;
   else if (y == 1)
      cout << x << endl;
   else
      cout << x << "/" << y << endl;
}