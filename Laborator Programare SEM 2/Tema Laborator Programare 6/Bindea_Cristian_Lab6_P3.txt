/*
   Bindea Gheorghe Cristian  Grupa 2115
   Problema 3 - Program care implementeaza o clasa pentru lucrul cu o matrice, clasa contine metode pentru citire, afisare, afisarea elementelor de pe diagonale si de sub diagonale
*/

#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
using namespace std;

const int Max1 = 10;
const int Max2 = 10;

class Matrix {
   int** mat, dim1, dim2;
   int returnElement(int row, int column);

public:
   Matrix(int dim1, int dim2);
   void displayMatrix(void);
   void displayColumn(int col);
   void readMatrix(void);
   void displaySecondDiagonal(void);
   void displayUnderSecondDiagonal(void);
   void matrice(void);
}
Matrix::Matrix(int dim1 = 0, int dim2 = 0) {
   mat = new int* [dim1];
   for (int i = 0; i < dim1; i++)
      mat[i] = new int[dim2];
   this->dim1 = dim1;
   this->dim2 = dim2;
}
void Matrix::displayColumn(int col) {
   if (col < 0 || col >= dim2) {
      cout << "\nColoana cu numarul " << col << " nu exista in matricea din clasa!\n";
   }
   else {
      cout << "\nElementele coloanei " << col << ": ";
      for (int i = 0; i < dim1; i++) {
         cout << returnElement(i, col) << " ";
      }
   }
}
int Matrix::returnElement(int row, int column) {
   return mat[row][column];
}
void Matrix::readMatrix() {
   cout << "Introduceti elementele matricii:\n";
   for (int i = 0; i < dim1; i++) {
      for (int j = 0; j < dim2; j++) {
         cout << "matrix[" << i << "][" << j << "] = ";
         cin >> mat[i][j];
      }
   }
}
void Matrix::displayMatrix() {
   cout << "\nElementele matricii: ";
   for (int i = 0; i < dim1; i++) {
      cout << "\n";
      for (int j = 0; j < dim2; j++) {
         cout << returnElement(i, j) << " ";
      }
   }
   cout << endl;
}
void Matrix::displaySecondDiagonal(void)
{
   if (dim1 == dim2)
   {
      cout << "Diagonala secundara:\n";
      for (int i = 1; i <= dim1; i++)
         cout << returnElement(i, dim1 - i + 1) << " ";
   }
   else
      cout << "Matricea nu e patratica\n";
}
void Matrix::displayUnderSecondDiagonal(void)
{
   if (dim1 == dim2)
   {
      cout << "Sub diagonala secundara:\n";
      for (int i = 2; i <= dim1; i++)
         for (int j = dim1 + 2 - i; j <= dim1; j++)
            cout << returnElement(i, j) << " ";
   }
   else
      cout << "Matricea nu e patratica\n";
}
void Matrix::matrice(void)
{
   int** matrice = new int* [dim1];
   for (int i = 0; i < dim1; i++)
      matrice[i] = new int[dim2];
   cout << "Introduceti cate o valoare pentru fiecare element din matrice\n";
   int num;
   for (int i = 0; i < dim1; i++)
      for (int j = 0; j < dim2; j++)
      {
         cout << "matrix[" << i << "][" << j << "] = " << returnElement(i, j) << endl;
         cout << "Numar = "; cin >> num;
         if (num > returnElement(i, j))
            matrice[i][j] = 1;
         else
            matrice[i][j] = 0;
      }
   cout << "\nElementele matricii generate: ";
   for (int i = 0; i < dim1; i++) {
      cout << "\n";
      for (int j = 0; j < dim2; j++) {
         cout << matrice[i][j] << " ";
      }
   }
   delete[]matrice;
}
int main() {
   int dim1, dim2;
   cout << "\nIntroduceti dimensiunile 1 si 2 ale matricii: (<=10):\n";
   cin >> dim1;
   cin >> dim2;
   Matrix m1(dim1, dim2);
   m1.readMatrix();
   m1.displayMatrix();
   int c;
   cout << "\nIntroduceti un numar de coloana ale carei elemente vor fi afisate: (<" << dim2 << ") ";
   cin >> c;
   m1.displayColumn(c);
   m1.displaySecondDiagonal();
   m1.displayUnderSecondDiagonal();
   m1.matrice();
   return 0;
}