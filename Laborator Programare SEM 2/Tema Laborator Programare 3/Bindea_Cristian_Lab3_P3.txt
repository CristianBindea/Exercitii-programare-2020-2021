/*
	Bindea Gheorghe Cristian  Grupa 2115
	Problema 3 - Program care determina traseul cu cost minim pentru transmiterea unui pachet de date intre mai multe filiale
*/

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>

#define MAX 7
int x[MAX], Y[MAX];
int COST[MAX][MAX];
int n;

void cit(int[][MAX], int&);
void afis(int[][MAX], int&);
int max_cost(int[][MAX], int&);
void afis_sol(long&);
int posibil(int);

int main()
{
	int k;
	long cost_M, C;
	printf("Introduceti numarul de filiale <=7\n");
	scanf("%d", &n);
	printf("Introduceti si afis matricea costurilor C\n");
	cit(COST, n);
	afis(COST, n);
	cost_M = (n + 1) * (long)max_cost(COST, n) + 1;
	k = 0;
	printf("Introduceti filiala de pornire (0, ..., %d): ", n - 1);
	scanf("%d", &x[k]);
	k = 1;
	x[k] = -1;
	do {
		while (x[k] < n)
		{
			x[k]++;
			if (posibil(k))
				if ((k == (n - 1)) && (COST[x[n - 1]][x[0]] != 0))
				{
					C = 0;
					for (int i = 0; i < n - 1; i++)
						C += COST[x[i]][x[i + 1]];

					C += COST[x[n - 1]][x[0]];
					if (C < cost_M)
						for (int i = 0; i < n; i++)
						{
							Y[i] = x[i]; cost_M = C;
						}
				}
				else
				{
					k++; x[k] = -1;
				}
		}
		k--;
	} while (!(k < 1));

	afis_sol(cost_M);
	return 0;
}
int posibil(int k)
{
	if (k == 0)return 1;
	if (COST[x[k - 1]][x[k]] != 0)
	{
		for (int i = 0; i < k; i++)
			if (x[k] == x[i])
				return 0;
		return 1;
	}
	return 0;
}
void afis_sol(long& CF)
{
	printf("Traseul este : ");
	for (int i = 0; i < n; i++)
		printf("%d ", Y[i]);
	printf("\nCostul este %ld\n", CF);
}
void cit(int mat[][MAX], int& n)
{
	for (int i = 0; i < n - 1; i++)
	{
		mat[i][i] = 0;
		for (int j = i + 1; j < n; j++)
		{
			printf("Costul de la filiala [%d] la [%d] este =", i, j);
			scanf("%d", &mat[i][j]);
			mat[j][i] = mat[i][j];
		}
	}
}
void afis(int mat[][MAX], int& n)
{
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < n; j++)
			printf("%4d ", mat[i][j]);
		printf("\n");
	}
}
int max_cost(int mat[][MAX], int& n)
{
	int max = mat[0][0];
	for (int i = 0; i < n; i++)
		for (int j = 0; j < n; j++)
			if (mat[i][j] > max)max = mat[i][j];
	return max;
}