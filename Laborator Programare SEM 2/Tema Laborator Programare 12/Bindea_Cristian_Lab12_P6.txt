/*
   Bindea Gheorghe Cristian  Grupa 2115
   Problema 6 - Program care implementeaza o clasa Fractie cu functii prietene care supraincarca oeperatorii +,-,*,/
   si are un contor icount care afiseaza numarul de apelari ale constructorilor,
   formateaza afisarea fractiilor si a contorului dupa cerinta
*/

#define _CRT_SECURE_NO_WARNINGS
#include <iomanip>
#include <iostream>

using namespace std;
class Fractie {
   int a;//numarator
   int b;//numitor
   int cmmdc() {
      int a1 = a;
      int b1 = b;
      bool negative = false;
      if (a1 < 0 && b1 < 0) {
         a1 = -a1;
         b1 = -b1;
      }
      else if (a1 < 0) {
         negative = true;
         a1 = -a1;
      }
      else if (b1 < 0) {
         negative = true;
         b1 = -b1;
      }
      while (a1 != b1)
         a1 > b1 ? a1 -= b1 : b1 -= a1;
      if (negative)
         return -a1;
      return a1;
   }
   static int icount;
public:
   Fractie() { a = 0; b = 1; icount++; }
   Fractie(int x, int y) {
      a = x; b = y;
      icount++;
   }
   Fractie(const Fractie& f) {
      a = f.a; b = f.b;
      icount++;
   }
   void setNumarator(int numarator) { a = numarator; }
   void setNumitor(int numitor) { b = numitor; }
   int getNumarator(void) { return a; }
   int getNumitor(void) { return b; }
   static int getIcount(void) { return icount; }
   Fractie simplificare(void) {
      int d = cmmdc();
      Fractie rez(a / d, b / d);
      return rez;
   }
   friend Fractie operator+(Fractie f1, Fractie f2);
   friend Fractie operator-(Fractie f1, Fractie f2);
   friend Fractie operator*(Fractie f1, Fractie f2);
   friend Fractie operator/(Fractie f1, Fractie f2);
   friend ostream& operator<<(ostream& stream, Fractie f);

   ~Fractie() {
      cout << "Destructor, contor: " << icount << endl;
   }
};

int Fractie::icount = 0;
Fractie operator+(Fractie f1, Fractie f2) {
   int x, y;
   if (f1.getNumitor() == f2.getNumitor()) {
      x = f1.getNumarator() + f2.getNumitor();
      y = f1.getNumitor();
      Fractie rez(x, y);
      return rez;
   }

   x = f1.getNumarator() * f2.getNumitor() + f1.getNumitor() * f2.getNumarator();
   y = f1.getNumitor() * f2.getNumitor();
   Fractie rez(x, y);
   return rez;
}
Fractie operator-(Fractie f1, Fractie f2) {
   int x, y;
   if (f1.getNumitor() == f2.getNumitor()) {
      x = f1.getNumarator() - f2.getNumitor();
      y = f1.getNumitor();
      Fractie rez(x, y);
      return rez;
   }

   x = f1.getNumarator() * f2.getNumitor() - f1.getNumitor() * f2.getNumarator();
   y = f1.getNumitor() * f2.getNumitor();
   Fractie rez(x, y);
   return rez;
}
Fractie operator*(Fractie f1, Fractie f2) {
   int x, y;
   x = f1.getNumarator() * f2.getNumarator();
   y = f1.getNumitor() * f2.getNumitor();
   Fractie rez(x, y);
   return rez;
}
Fractie operator/(Fractie f1, Fractie f2) {
   int x, y;
   x = f1.getNumitor() * f2.getNumitor();
   y = f1.getNumarator() * f2.getNumarator();
   Fractie rez(x, y);
   return rez;
}
ostream& operator<<(ostream& stream, Fractie f)
{
   int x = f.a;
   int y = f.b;
   bool negative = false;
   if (x < 0 && y < 0) {
      x = -x;
      y = -y;
   }
   else if (x < 0) {
      x = -x;
      negative = true;
   }
   else if (y < 0) {
      y = -y;
      negative = true;
   }

   if (negative)
      cout << "-";

   if (x == 0)
      cout << 0 << endl;
   else if (y == 1)
      cout << x << endl;
   else
      cout << x << "/" << y << endl;
   return stream;
}

void afisare(Fractie f);
int main()
{
   int num;
   Fractie f1;
   Fractie f2;
   cout << "Valori initiale fractie 1:\n "; afisare(f1);
   cout << "Valori initiale fractie 2:\n "; afisare(f2);
   cout << "Contorul dupa initializarea primelor doua fractii: " << setw(15) << setfill('$') << left << Fractie::getIcount() << endl;

   cout << "\nIntroduceti doua seturi de numarator/numitor pentru cele doua fractii:\n";
   cout << "Numarator fractie 1: "; cin >> num; f1.setNumarator(num);
   cout << "Numitor fractie 1: "; cin >> num;
   if (num != 0)
      f1.setNumitor(num);
   else { cout << "Numitorul nu poate fi 0\n"; cout << "Contorul la sfarsitul programului: " << Fractie::getIcount() << "\n"; return 1; }

   cout << "Numarator fractie 2: "; cin >> num; f2.setNumarator(num);
   cout << "Numitor fractie 2: "; cin >> num;
   if (num != 0)
      f2.setNumitor(num);
   else { cout << "Numitorul nu poate fi 0\n"; cout << "Contorul la sfarsitul programului: " << Fractie::getIcount() << "\n"; return 1; }

   cout << "Fractie 1:  "; cout << f1;
   cout << "Fractie 2: "; cout << f2;
   Fractie f3;
   f3 = f1 + f2;
   cout << "Suma celor doua fractii este: "; cout << f3;
   Fractie f4;
   f4 = f1 - f2;
   cout << "Diferenta celor doua fractii este: "; cout << f4;
   Fractie f5;
   f5 = f1 * f2;
   cout << "Produsul celor doua fractii este: "; cout << f5;
   Fractie f6;
   f6 = f1 / f2;
   cout << "Catul celor doua fractii este: "; cout << f6;
   cout << "\n";
   cout << "Contorul la sfarsitul programului: " << setw(20) << setfill('#') << right << Fractie::getIcount() << endl;


   cout << "\n\n Rezultate simplificate:\n";
   f3 = f3.simplificare(); f4 = f4.simplificare(); f5 = f5.simplificare(); f6 = f6.simplificare();
   cout << "Suma celor doua fractii este: "; cout << setprecision(4) << fixed << (double)f3.getNumarator() << "/" << (double)f3.getNumitor() << endl;
   cout << "Diferenta celor doua fractii este: "; cout << setprecision(4) << fixed << (double)f4.getNumarator() << "/" << (double)f4.getNumitor() << endl;
   cout << "Produsul celor doua fractii este: "; cout << setprecision(4) << fixed << (double)f5.getNumarator() << "/" << (double)f5.getNumitor() << endl;
   cout << "Catul celor doua fractii este: "; cout << setprecision(4) << fixed << (double)f6.getNumarator() << "/" << (double)f6.getNumitor() << endl;




   return 0;
}

ostream& formatare(ostream& stream)
{
   stream.width(10);
   stream.precision(5);
   stream.fill('*');
   return stream;
}
void afisare(Fractie f)
{
   int x = f.getNumarator();
   int y = f.getNumitor();
   bool negative = false;
   if (x < 0 && y < 0) {
      x = -x;
      y = -y;
   }
   else if (x < 0) {
      x = -x;
      negative = true;
   }
   else if (y < 0) {
      y = -y;
      negative = true;
   }

   if (negative)
   {
      cout << formatare << left << "-" << x << endl;
      cout << formatare << right << y << endl;
   }
   else
   {
      cout << formatare << left << x << endl;
      cout << formatare << right << y << endl;
   }
}