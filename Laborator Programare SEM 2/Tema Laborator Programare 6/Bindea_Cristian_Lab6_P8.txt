/*
   Bindea Gheorghe Cristian  Grupa 2115
   Problema 8 - Program care extinde exemplul 6 si permite introducerea de coduri CNP care incep si cu 5 sau 6 si afiseaza cate un mesaj corespunzator la validarea codului CNP
*/

#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
using namespace std;
#include <time.h>

class Person {
   char nume[16];
   char prenume[24];
   char cnp[14];
public:
   void setNume(char* n);
   void setPrenume(char* p);
   int setCnp(char* c);
   char* getNume(void) { return nume; }
   char* getPrenume(void) { return prenume; }
   char* getCnp(void) { return cnp; }
   char get_gender(void);
   int get_an_nast(void);
   int get_luna_nast(void);
   int get_zi_nast(void);
   int get_varsta(void);
};
void Person::setNume(char* n) {
   if (n != 0)
      strncpy(nume, n, 15);
   else
      strcpy(nume, "Necunoscut");
}
void Person::setPrenume(char* p) {
   if (p != 0)
      strncpy(prenume, p, 23);
   else
      strcpy(prenume, "Necunoscut");
}
int Person::setCnp(char* c) {
   char buf[3];
   int n;
   if (c != 0) {
      cnp[13] = '\0';
      if (strlen(c) != 13)
         return 1;
      if (c[0] != '1' && c[0] != '2' && c[0] != '5' && c[0] != '6')
         return 2;
      strncpy(buf, c + 1, 2);
      buf[2] = '\0';
      n = atoi(buf);
      if (n > 99)
         return 3;
      strncpy(buf, c + 3, 2);
      buf[2] = '\0';
      n = atoi(buf);
      if (n == 0 || n > 12)
         return 4;
      strncpy(buf, c + 5, 2);
      buf[2] = '\0';
      n = atoi(buf);
      if (n == 0 || n > 31)
         return 5;
      strcpy(cnp, c);
      return 0;
   }
}
char Person::get_gender(void) {
   if (cnp[0] == '1' || cnp[0] == '5') return 'M';
   if (cnp[0] == '2' || cnp[0] == '6') return 'F';
   return 'X';
}
int Person::get_an_nast(void) {
   char buf[3];
   strncpy(buf, cnp + 1, 2);
   buf[2] = '\0';
   return(1900 + atoi(buf));
}
int Person::get_luna_nast(void) {
   char buf[3];
   strncpy(buf, cnp + 3, 2);
   buf[2] = '\0';
   return(atoi(buf));
}
int Person::get_zi_nast(void) {
   return((cnp[5] - '0') * 10 + (cnp[6] - '0'));
}
int Person::get_varsta(void) {
   struct tm* newTime;
   time_t szClock;
   time(&szClock);
   newTime = localtime(&szClock);
   int an_c = 1900 + newTime->tm_year;
   int an_n = get_an_nast();
   int n = an_c - an_n;
   int lu_c = newTime->tm_mon + 1;
   int lu_n = get_luna_nast();
   if (lu_c < lu_n) n--;
   else {
      if (lu_c == lu_n) {
         int zi_c = newTime->tm_mday;
         int zi_n = get_zi_nast();
         if (zi_c < zi_n)
            n--;
      }
   }
   return n;
}

int main() {
   Person p1;
   char aux_string[30];
   cout << "\nEnter Name: ";
   cin >> aux_string;
   p1.setNume(aux_string);
   cout << "\nEnter SurName: ";
   cin >> aux_string;
   p1.setPrenume(aux_string);
   cout << "\nEnter CNP: ";
   cin >> aux_string;//1890403120671
   int rez = p1.setCnp(aux_string);
   while (rez != 0)
   {
      if (rez == 1)
         cout << "Dimesiunea CNPP-ului este gresita\n";
      else if (rez == 2)
         cout << "Prima cifra din CNP nu este valida\n";
      else if (rez == 4||rez==5)
         cout << "Data din CNP este introdusa gresit\n";
      cout << "Reincercati\n";
      cin >> aux_string;
      rez = p1.setCnp(aux_string);
   }
   cout << "Date despre obiect: " << endl;
   cout << "\tNume: " << p1.getNume() << ", Prenume: " << p1.getPrenume() <<
      ", CNP: " << p1.getCnp() << endl;
   cout << "\tSex: " << p1.get_gender() << endl;
   cout << "\tData nasterii: " <<
      p1.get_an_nast() << "/" << p1.get_luna_nast() << "/" << p1.get_zi_nast() << endl;
   cout << "\tVarsta: " << p1.get_varsta() << endl;

   return 0;
}