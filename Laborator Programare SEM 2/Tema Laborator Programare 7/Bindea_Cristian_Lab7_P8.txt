/*
   Bindea Gheorghe Cristian  Grupa 2115
   Problema 8 - Program care implementeaza o clasa Fractie cu nume, continuare pentru problema 7
*/

#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
using namespace std;

const char numeInitial[] = "Necunoscut";
class Fractie {
   int a;//numarator 
   int b;//numitor
   char* nume;
   int cmmdc() {
      int a1 = a;
      int b1 = b;
      bool negative = false;
      if (a1 < 0 && b1 < 0) {
         a1 = -a1;
         b1 = -b1;
      }
      else if (a1 < 0) {
         negative = true;
         a1 = -a1;
      }
      else if (b1 < 0) {
         negative = true;
         b1 = -b1;
      }
      while (a1 != b1)
         a1 > b1 ? a1 -= b1 : b1 -= a1;
      if (negative)
         return -a1;
      else
         return a1;
   }
public:
   Fractie() {
      a = 0; b = 1;
      nume = new char[20];
      strcpy(nume, numeInitial);
   }
   Fractie(const Fractie& f) {
      a = f.a;
      b = f.b;
      nume = new char[strlen(f.nume) + 1];
      strcpy(nume, f.nume);
   }
   Fractie(int x, int y, char c[]) {
      if (y == 0) {
         cout << "\nApelare nereusita. Numarator = 0\n\n";
         a = 0; b = 1;
      }
      else {
         a = x; b = y;
      }
      nume = new char[40];
      strcpy(nume, c);
   }
   ~Fractie() {
      delete[]nume;
   }
   void setNumarator(int num) { a = num; }
   void setNumitor(int num) { b = num; }
   void setNume(char c[]) { strcpy(nume, c); }
   int getNumarator(void) { return a; }
   int getNumitor(void) { return b; }
   char* getNume(void) { return nume; }
   Fractie simplificare(void) {
      int d = cmmdc();
      Fractie rez(a / d, b / d, nume);
      return rez;
   }
   Fractie aduna_fractie(Fractie f) {
      int x, y;
      if (b == f.getNumitor()) {
         x = a + f.getNumitor();
         y = b;
         Fractie rez(x, y, nume);
         rez = rez.simplificare();
         return rez;
      }
      else {
         x = a * f.getNumitor() + b * f.getNumarator();
         y = b * f.getNumitor();
         Fractie rez(x, y, nume);
         rez = rez.simplificare();
         return rez;
      }
   }
   Fractie scade_fractie(Fractie f) {
      int x, y;
      if (b == f.getNumitor()) {
         x = a - f.getNumitor();
         y = b;
         Fractie rez(x, y, nume);
         rez = rez.simplificare();
         return rez;
      }
      else {
         x = a * f.getNumitor() - b * f.getNumarator();
         y = b * f.getNumitor();
         Fractie rez(x, y, nume);
         rez = rez.simplificare();
         return rez;
      }
   }
   Fractie inmultire_fractie(Fractie f) {
      int x, y;
      x = a * f.getNumarator();
      y = b * f.getNumitor();
      Fractie rez(x, y, nume);
      rez = rez.simplificare();
      return rez;
   }
   Fractie impartire_fractie(Fractie f) {
      int x, y;
      x = a * f.getNumitor();
      y = b * f.getNumarator();
      Fractie rez(x, y, nume);
      rez = rez.simplificare();
      return rez;
   }
};

void afisare(Fractie f);
int main()
{
   Fractie f1;
   f1.setNumarator(12);
   f1.setNumitor(24);
   f1.setNume((char*)"F1");

   Fractie f2(27, 15, (char*)"F2");
   cout << "Fractia 1: "; afisare(f1);
   cout << "Fractia 2: "; afisare(f2);
   
   Fractie f3 = f1;
   cout << "Fractia 3: "; afisare(f3);

   return 0;
}

void afisare(Fractie f)
{
   int x = f.getNumarator();
   int y = f.getNumitor();
   bool negative = false;
   if (x < 0 && y < 0) {
      x = -x;
      y = -y;
   }
   else if (x < 0) {
      x = -x;
      negative = true;
   }
   else if (y < 0) {
      y = -y;
      negative = true;
   }

   cout << f.getNume() << " : ";
   if (negative)
      cout << "-";

   if (x == 0)
      cout << 0 << endl;
   else if (y == 1)
      cout << x << endl;
   else
      cout << x << "/" << y << endl;
}